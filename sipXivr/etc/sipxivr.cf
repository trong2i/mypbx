# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

#
# sipxivr configuration and process management
#
bundle agent sipxivr {
  methods:
    sipxivr::
      "any" usebundle => "sipxivr_config";
    (moh|sipxconference)::
      "any" usebundle => "sync_moh_prompts";
    any::
      "any" usebundle => "sipxivr_logwatcher";
      "any" usebundle => "sipxivr_vm_cleanup";
      "any" usebundle => "sipxivr_running";
}

bundle agent sipxivr_config {
  files:
    any::
      "$(sipx.SIPX_CONFDIR)/sipxivr.properties"
        comment => "install sipxivr config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => sipxivr_properties_contents,
        classes => if_repaired("restart_sipxivr");
        
       "$(sipx.SIPX_CONFDIR)/sipxivr/log4j.properties"
        comment => "configure ivr log4j $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => sipxivr_log4j_properties_contents;

      "$(sipx.SIPX_CONFDIR)/autoattendants.xml"
        comment => "install sipxivr config $(this.promiser)",
        create => "true",
        perms => m("644"),
        copy_from => copy_from_cfdata("$(sipx.location_id)/autoattendants.xml");

    !primary::
      "$(sipx.SIPX_IVRDATADIR)/prompts"
        comment => "sync AA prompts",
        create => "true",
        perms => mog("644","$(sipx.SIPXPBXUSER)","$(sipx.SIPXPBXGROUP)"),
        copy_from => copy_prompts("$(sipx.master_address)","$(sipx.SIPX_IVRDATADIR)/prompts"),
        file_select => wav_prompt,
        depth_search => recurse("1");

      "$(sipx.SIPX_IVRDATADIR)/ivrscript"
        comment => "sync custom ivr scripts",
        perms => mog("644","$(sipx.SIPXPBXUSER)","$(sipx.SIPXPBXGROUP)"),
        copy_from => copy_prompts("$(sipx.master_address)","$(sipx.SIPX_IVRDATADIR)/ivrscript"),
        depth_search => recurse("inf");
}

bundle agent sipxivr_logwatcher {
  files:
    "$(sipx.SIPX_CONFDIR)/sipxlogwatcher.d/sipxivr.tmp"
      comment => "sipxivr log watcher",
      create => "true",
      perms => m(644),
      transformer => "$(sipx.SIPX_LIBEXECDIR)/sipxlogwatcher-maker --in $(sipx.SIPX_CFDATA)/$(sipx.location_id)/alarms.yaml --template $(sipx.SIPX_CONFDIR)/sipxivr/sipxivr.sec.erb --out $(this.promiser)";
      
    "$(sipx.SIPX_CONFDIR)/sipxlogwatcher.d/sipxivr.sec"
      comment => "sipxivr log watcher",
      create => "true",
      perms => m(644),
      copy_from => local_cp_by_digest("$(sipx.SIPX_CONFDIR)/sipxlogwatcher.d/sipxivr.tmp"),
      classes => if_repaired("reload_sipxlogwatcher");      
}

bundle agent sync_moh_prompts {
    files:
      !primary::
        "$(sipx.SIPX_IVRDATADIR)/moh"
         comment => "sync MoH files",
         create => "true",
         perms => mog("644","$(sipx.SIPXPBXUSER)","$(sipx.SIPXPBXGROUP)"),
         copy_from => copy_prompts("$(sipx.master_address)","$(sipx.SIPX_IVRDATADIR)/moh"),
         file_select => wav_prompt,
         depth_search => recurse("2");
}

bundle edit_line sipxivr_properties_contents {
  insert_lines:
    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/sipxivr.properties.part"
        insert_type => "file";
      "ivr.sipxchangeDomainName=$(sipx.domain)";
      "ivr.realm=$(sipx.realm)";
      "log.file=$(sipx.SIPX_LOGDIR)/sipxivr.log";
      "ivr.dataDirectory=$(sipx.SIPX_IVRDATADIR)";
      "ivr.identity=$(sipx.location_id)";
      "ivr.mailstoreDirectory=$(sipx.SIPX_IVRDATADIR)/mailstore";
      "ivr.promptsDirectory=$(sipx.SIPX_IVRDATADIR)/prompts";
      "ivr.scriptsDirectory=$(sipx.wwwdir)/doc/aa_vxml";
      "ivr.docDirectory=$(sipx.wwwdir)/doc";
      "ivr.logDirectory=$(sipx.SIPX_LOGDIR)";
      "ivr.organizationPrefs=$(sipx.SIPX_IVRDATADIR)/organizationprefs.xml";
      "ivr.binDirectory=$(sipx.SIPX_BINDIR)";
     "ivr.backupPath=$(sipx.SIPX_VARDIR)/backup";
  delete_lines:
    any::
      ".*";
}

bundle edit_line sipxivr_log4j_properties_contents {
  insert_lines:
    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/log4j-ivr.properties.part"
        insert_type => "file";
      "log4j.rootLogger=warn, file";        
      "log4j.appender.file=org.sipfoundry.commons.log4j.SipFoundryAppender";
      "log4j.appender.file.File=$(sipx.SIPX_LOGDIR)/sipxivr.log";
      "log4j.appender.file.layout=org.sipfoundry.commons.log4j.SipFoundryLayout";
      "log4j.appender.file.layout.facility=sipXivr";
      "# ALARMS log";
      "log4j.logger.alarms=info,alarms";
	  "log4j.additivity.alarms=false";
	  "log4j.appender.alarms=org.sipfoundry.commons.log4j.SipFoundryAppender";
	  "log4j.appender.alarms.File=$(sipx.SIPX_LOGDIR)/sipxivr-alarms.log";
	  "log4j.appender.alarms.layout=org.sipfoundry.commons.log4j.SipFoundryLayout";
  delete_lines:
    any::
      ".*";
}

bundle agent sipxivr_running {
  vars:
    any::
      "service_command" string => ".*\s-Dprocname=sipxivr\s.*";

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command_regex("$(service_command)","sipxivr_running");
    !src.sipxivr::
      "any" usebundle => rh_chkconfig_status("sipxivr on");
    !src.!sipxivr::
      "any" usebundle => rh_chkconfig_status("sipxivr off");

  commands:
    (!sipxivr|stop_sipxecs).sipxivr_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxivr"
        comment => "stop sipxivr",
        args => "stop";

    sipxivr.!sipxivr_running.!stop_sipxecs::
      "$(sipx.SIPX_SERVICEDIR)/sipxivr"
        comment => "start sipxivr",
        args => "start";

    sipxivr.sipxivr_running.(restart_sipxecs|restart_sipxivr)::
      "$(sipx.SIPX_SERVICEDIR)/sipxivr"
        comment => "restart sipxivr",
        args => "asyncrestart";
}

# Install cron schedules for vm cleanup
bundle agent sipxivr_vm_cleanup {
  vars:
    # execute it every day after midnight
    "cron" string => "10 0 * * * $(sipx.SIPX_BINDIR)/voicemail_clean > /dev/null";
    "cron_id" string => ".*/voicemail_clean .*"; #regex

  methods:
    sipxivr::
      "any" usebundle => add_crontab("$(cron_id)", "$(sipx.SIPXPBXUSER)", "$(cron)");

    !sipxivr::
      "any" usebundle => remove_crontab("$(cron_id)", "$(sipx.SIPXPBXUSER)");
}

body copy_from copy_prompts(server,file) {
  servers => { "$(server)" };
  source => "$(file)";
  compare => "digest";
  trustkey => "true";
  purge => "true";
}

body file_select wav_prompt {
  leaf_name => {
    ".*\.wav"
  };
  file_result => "leaf_name";
}

body file_select custom_ivr {
  file_result => "leaf_name";
}