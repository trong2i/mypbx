# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

#
# sipXrelay configuration and process management
#
bundle agent sipxrelay {
  methods:
    any::
      "any" usebundle => sipxrelay_logwatcher;
      "any" usebundle => sipxrelay_running;
}

bundle agent sipxrelay_logwatcher {
  files:
    "$(sipx.SIPX_CONFDIR)/sipxlogwatcher.d/sipxrelay.tmp"
      comment => "sipxrelay log watcher tmp",
      create => "true",
      perms => m(644),
      transformer => "$(sipx.SIPX_LIBEXECDIR)/sipxlogwatcher-maker --in $(sipx.SIPX_CFDATA)/$(sipx.location_id)/alarms.yaml --template $(sipx.SIPX_CONFDIR)/sipxrelay/sipxrelay.sec.erb --out $(this.promiser)";

    "$(sipx.SIPX_CONFDIR)/sipxlogwatcher.d/sipxrelay.sec"
      comment => "sipxrelay log watcher",
      create => "true",
      perms => m(644),
      copy_from => local_cp_by_digest("$(sipx.SIPX_CONFDIR)/sipxlogwatcher.d/sipxrelay.tmp"),
      classes => if_repaired("reload_sipxlogwatcher");      
}

bundle agent sipxrelay_running {
  vars:
    any::
      "service_command" string => ".*\s-Dprocname=sipxrelay\s.*";

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command_regex("$(service_command)","sipxrelay_running");
    !src.sipxrelay::
      "any" usebundle => rh_chkconfig_status("sipxrelay on");
    !src.!sipxrelay::
      "any" usebundle => rh_chkconfig_status("sipxrelay off");

  commands:
    sipxrelay.!sipxrelay_running.!stop_sipxecs::
      "$(sipx.SIPX_SERVICEDIR)/sipxrelay"
        comment => "start sipxrelay",
        args => "start";

    sipxrelay.sipxrelay_running.(restart_sipxrelay|restart_sipxecs)::
      "$(sipx.SIPX_SERVICEDIR)/sipxrelay"
        comment => "restart sipxrelay",
        args => "asyncrestart";

    (!sipxrelay|stop_sipxecs).sipxrelay_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxrelay"
        comment => "stop sipxrelay",
        args => "stop";
       
  files:      
    any::  
      "$(sipx.SIPX_CONFDIR)/sipxrelay/log4j.properties"
        comment => "configure relay log4j $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => sipxrelay_log4j_properties_contents;
}

bundle edit_line sipxrelay_log4j_properties_contents {
  insert_lines:
    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/log4j-relay.properties.part"
        insert_type => "file";
	  "log4j.rootLogger=warn, file";
      "log4j.appender.file=org.sipfoundry.commons.log4j.SipFoundryAppender";
      "log4j.appender.file.File=$(sipx.SIPX_LOGDIR)/sipxrelay.log";
      "log4j.appender.file.layout=org.sipfoundry.commons.log4j.SipFoundryLayout";
      "log4j.appender.file.layout.facility=sipXrelay";
      "# ALARMS log";
      "log4j.logger.alarms=info,alarms";
	  "log4j.additivity.alarms=false";
	  "log4j.appender.alarms=org.sipfoundry.commons.log4j.SipFoundryAppender";
	  "log4j.appender.alarms.File=$(sipx.SIPX_LOGDIR)/sipxrelay-alarms.log";
	  "log4j.appender.alarms.layout=org.sipfoundry.commons.log4j.SipFoundryLayout";
  delete_lines:
    any::
      ".*";
}
