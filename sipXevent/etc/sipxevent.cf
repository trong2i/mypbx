# Copyright (C) 2012 eZuce Inc., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the AGPL license.

#
# sipxevent configuration and process management
#
bundle agent sipxevent {
  methods:
    sipxevent::
      "any" usebundle => "sipxevent_config";
    any::
      "any" usebundle => "sipxevent_setup";
      "any" usebundle => "sipxevent_running";
}

bundle agent sipxevent_config {
  files:
    any::
      "$(sipx.SIPX_CONFDIR)/sipxevent.properties"
        comment => "install sipxevent config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => sipxevent_properties_contents,
        classes => if_repaired("restart_sipxevent");
}

bundle edit_line sipxevent_properties_contents {
  insert_lines:
    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/sipxevent.properties.part"
        insert_type => "file";
      "event.realm=$(sipx.realm)";
      "keystore.file=$(sipx.SIPX_CONFDIR)/ssl/ssl.keystore";
      "keystore.password=changeit";
      "log.file=$(sipx.SIPX_LOGDIR)/sipxevent.log";
      "java.dir=$(sipx.SIPX_JAVADIR)/sipXevent";
      "conf.dir=$(sipx.SIPX_CONFDIR)";
  delete_lines:
    any::
      ".*";
}

bundle agent sipxevent_setup {
  methods:
    !src.sipxevent::
      "any" usebundle => rh_chkconfig_status("sipxevent on");
    !src.!sipxevent::
      "any" usebundle => rh_chkconfig_status("sipxevent off");
}

bundle agent sipxevent_running {
  vars:
    any::
      "service_command" string => ".*\s-Dprocname=sipxevent\s.*";
  methods:
    any::
      "any" usebundle => find_sipxservice_by_command_regex("$(service_command)","sipxevent_running");

  commands:
    (!sipxevent|stop_sipxecs).sipxevent_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxevent"
        comment => "stop sipxevent",
        args => "stop";

    sipxevent.!sipxevent_running.!stop_sipxecs::
      "$(sipx.SIPX_SERVICEDIR)/sipxevent"
        comment => "start sipxevent",
        args => "start";

    sipxevent.sipxevent_running.(restart_sipxecs|restart_sipxevent)::
      "$(sipx.SIPX_SERVICEDIR)/sipxevent"
        comment => "restart sipxevent",
        args => "restart";
}